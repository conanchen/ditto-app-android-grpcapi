apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'//improtant
apply plugin: 'com.github.dcendents.android-maven'//for javadoc-task
apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        disable 'InvalidPackage', 'HardcodedText'
        textReport true
        textOutput "stdout"
        abortOnError false
    }
}

version = "1.0.0"//发布的library的版本号
def siteUrl = 'https://github.com/conanchen/ditto-app-android-grpcapi'      // 项目的主页   这个是说明，可随便填
def gitUrl = 'https://github.com/conanchen/ditto-app-android-grpcapi'      // Git仓库的url  这个是说明，可随便填
group = "io.github.conanchen"    // 这里是groupId ,必须填写  一般填你唯一的包名

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        javalite {
            artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0"
        }
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0' // CURRENT_GRPC_VERSION
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
                grpc {
                    // Options added to --grpc_out
                    option 'lite'
                }
            }
        }
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    compile 'com.google.code.findbugs:jsr305:3.0.0'
    compile 'com.google.guava:guava:18.0'
    compile 'com.squareup.okhttp:okhttp:2.2.0'
    compile 'io.grpc:grpc-okhttp:1.0.0' // CURRENT_GRPC_VERSION
    compile 'io.grpc:grpc-protobuf-lite:1.0.0' // CURRENT_GRPC_VERSION
    compile 'io.grpc:grpc-stub:1.0.0' // CURRENT_GRPC_VERSION
    compile 'javax.annotation:javax.annotation-api:1.2'
}


install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'arr'
                // Add your description here
                name 'Android BounceProgressBar Widget'     //项目描述
                url siteUrl
                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'conan8chan'        //填写开发者的一些基本信息
                        name 'conan8chan'    //填写开发者的一些基本信息
                        email 'conan8chan@yahoo.com'   //填写开发者的一些基本信息
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = properties.getProperty("bintray.user")    //读取 local.properties 文件里面的 bintray.user
    key = properties.getProperty("bintray.apikey")   //读取 local.properties 文件里面的 bintray.apikey
    configurations = ['archives']
    pkg {
        userOrg = "kkchen"
        repo = "ditto-grpcapi-android"
        name = "grpc-api-andorid"    //发布到JCenter上的项目名字，必须填写
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
}
task sourcesJar(type: Jar) {
    from('build/generated/source/proto/release/grpc')
    from('build/generated/source/proto/release/javalite')
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

